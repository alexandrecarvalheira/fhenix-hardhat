/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export type InEuint32Struct = { data: BytesLike };

export type InEuint32StructOutput = [data: string] & { data: string };

export interface TestInterface extends Interface {
  getFunction(
    nameOrSignature: "addValue" | "addValueEncrypted" | "decrytVal" | "test"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addValueEncrypted",
    values: [InEuint32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "decrytVal",
    values: [InEuint32Struct]
  ): string;
  encodeFunctionData(functionFragment: "test", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addValueEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decrytVal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
}

export interface Test extends BaseContract {
  connect(runner?: ContractRunner | null): Test;
  waitForDeployment(): Promise<this>;

  interface: TestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addValue: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  addValueEncrypted: TypedContractMethod<
    [_amount: InEuint32Struct],
    [void],
    "nonpayable"
  >;

  decrytVal: TypedContractMethod<[_amount: InEuint32Struct], [bigint], "view">;

  test: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addValue"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addValueEncrypted"
  ): TypedContractMethod<[_amount: InEuint32Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decrytVal"
  ): TypedContractMethod<[_amount: InEuint32Struct], [bigint], "view">;
  getFunction(
    nameOrSignature: "test"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
