/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../common";
import type { Test, TestInterface } from "../../../contracts/TestFHE.sol/Test";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_test",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "addValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct inEuint32",
        name: "_amount",
        type: "tuple",
      },
    ],
    name: "addValueEncrypted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct inEuint32",
        name: "_amount",
        type: "tuple",
      },
    ],
    name: "decrytVal",
    outputs: [
      {
        internalType: "uint32",
        name: "x",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610cc8380380610cc8833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610ba46101246000396000818160ec0152818161019101526102580152610ba46000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631c78bf4e146100515780635b9af12b1461006d578063b6f92cb014610089578063f8a8fd6d146100b9575b600080fd5b61006b60048036038101906100669190610571565b6100d7565b005b610087600480360381019061008291906105f0565b61018f565b005b6100a3600480360381019061009e9190610571565b610233565b6040516100b0919061063c565b60405180910390f35b6100c1610256565b6040516100ce91906106d6565b60405180910390f35b60006100e282610233565b63ffffffff1690507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161014793929190610721565b6020604051808303816000875af1158015610166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018a9190610790565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016101ec93929190610721565b6020604051808303816000875af115801561020b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022f9190610790565b5050565b600061024f61024a8361024590610965565b61027a565b610290565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006102898260000151610353565b9050919050565b600061029b82610367565b6102ac576102a96000610374565b91505b600082905060006102bc82610388565b90506000608073ffffffffffffffffffffffffffffffffffffffff166373cc01546002846040518363ffffffff1660e01b81526004016102fd929190610a13565b602060405180830381865afa15801561031a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033e9190610a58565b9050610349816103e5565b9350505050919050565b60006103608260026103ef565b9050919050565b6000808214159050919050565b6000610381826002610489565b9050919050565b6060602067ffffffffffffffff8111156103a5576103a46107d3565b5b6040519080825280601f01601f1916602001820160405280156103d75781602001600182028036833780820191505090505b509050816020820152919050565b6000819050919050565b60006060608073ffffffffffffffffffffffffffffffffffffffff16635fa55ca784866040518363ffffffff1660e01b815260040161042f929190610a13565b600060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104759190610af5565b90506104808161052b565b91505092915050565b60006060608073ffffffffffffffffffffffffffffffffffffffff166319e1c5c46104b386610388565b856040518363ffffffff1660e01b81526004016104d1929190610b3e565b600060405180830381865afa1580156104ee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105179190610af5565b90506105228161052b565b91505092915050565b600060208201519050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000602082840312156105685761056761054d565b5b81905092915050565b60006020828403121561058757610586610543565b5b600082013567ffffffffffffffff8111156105a5576105a4610548565b5b6105b184828501610552565b91505092915050565b6000819050919050565b6105cd816105ba565b81146105d857600080fd5b50565b6000813590506105ea816105c4565b92915050565b60006020828403121561060657610605610543565b5b6000610614848285016105db565b91505092915050565b600063ffffffff82169050919050565b6106368161061d565b82525050565b6000602082019050610651600083018461062d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061069c61069761069284610657565b610677565b610657565b9050919050565b60006106ae82610681565b9050919050565b60006106c0826106a3565b9050919050565b6106d0816106b5565b82525050565b60006020820190506106eb60008301846106c7565b92915050565b60006106fc82610657565b9050919050565b61070c816106f1565b82525050565b61071b816105ba565b82525050565b60006060820190506107366000830186610703565b6107436020830185610703565b6107506040830184610712565b949350505050565b60008115159050919050565b61076d81610758565b811461077857600080fd5b50565b60008151905061078a81610764565b92915050565b6000602082840312156107a6576107a5610543565b5b60006107b48482850161077b565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61080b826107c2565b810181811067ffffffffffffffff8211171561082a576108296107d3565b5b80604052505050565b600061083d610539565b90506108498282610802565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610878576108776107d3565b5b610881826107c2565b9050602081019050919050565b82818337600083830152505050565b60006108b06108ab8461085d565b610833565b9050828152602081018484840111156108cc576108cb610858565b5b6108d784828561088e565b509392505050565b600082601f8301126108f4576108f3610853565b5b813561090484826020860161089d565b91505092915050565b600060208284031215610923576109226107bd565b5b61092d6020610833565b9050600082013567ffffffffffffffff81111561094d5761094c61084e565b5b610959848285016108df565b60008301525092915050565b6000610971368361090d565b9050919050565b600060ff82169050919050565b61098e81610978565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109ce5780820151818401526020810190506109b3565b60008484015250505050565b60006109e582610994565b6109ef818561099f565b93506109ff8185602086016109b0565b610a08816107c2565b840191505092915050565b6000604082019050610a286000830185610985565b8181036020830152610a3a81846109da565b90509392505050565b600081519050610a52816105c4565b92915050565b600060208284031215610a6e57610a6d610543565b5b6000610a7c84828501610a43565b91505092915050565b6000610a98610a938461085d565b610833565b905082815260208101848484011115610ab457610ab3610858565b5b610abf8482856109b0565b509392505050565b600082601f830112610adc57610adb610853565b5b8151610aec848260208601610a85565b91505092915050565b600060208284031215610b0b57610b0a610543565b5b600082015167ffffffffffffffff811115610b2957610b28610548565b5b610b3584828501610ac7565b91505092915050565b60006040820190508181036000830152610b5881856109da565b9050610b676020830184610985565b939250505056fea2646970667358221220995c071f456a335a2876f071af7b3821b5cbefca451f4ca0941e0ed46b5da2aa64736f6c63430008140033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _test: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_test, overrides || {});
  }
  override deploy(
    _test: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_test, overrides || {}) as Promise<
      Test & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Test__factory {
    return super.connect(runner) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new Interface(_abi) as TestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Test {
    return new Contract(address, _abi, runner) as unknown as Test;
  }
}
